#include "BinaryTree.h"
using namespace std;

template <typename ItemType>
class BinarySearchTree : public BinaryTree<ItemType> {
  
public:
  
  /**
   * Function to insert an element into the BST
   * Input Parameter: the element to insert
   */
  typename BinaryTree<ItemType>::Iterator insert(const ItemType& element) {
    
    //if the tree is empty, make new element the root
    if (BinaryTree<ItemType>::empty()) {
      BinaryTree<ItemType>::createRoot(element);
      return BinaryTree<ItemType>::root();
    }
    else {
      //otherwise, start at the root
      typename BinaryTree<ItemType>::Iterator position = BinaryTree<ItemType>::root();
      
      while (true) { 
	if (*position < element) {
	  //insert to right
	  if (position.hasRightChild())
	    position = position.right();
	  else
	    break;
	}
	else {
	  //insert to left
	  if (position.hasLeftChild())
	    position = position.left();
	  else
	    break;
	}
      } //end while
      
      //Now, position is place to insert below
      if (element <= *position) {
	BinaryTree<ItemType>::insertAsLeftChild(element,position);
	position = position.left();
      }
      else {
	BinaryTree<ItemType>::insertAsRightChild(element,position);
	position=position.right()
      }
      return position;
      
    }//end of main else
  } //end of insert
  
  /** 
   * Function to find if an element is in the tree
   * Input Parameter: the element to search for
   * Return value: an iterator to the node if it is present, or a null iterator if not
   */
  bool find(const ItemType& value) {
    typename BinaryTree<ItemType>::Iterator position = BinaryTree<ItemType>::root();
    
    while (!position.isNULL()) {
    
      if (*position == value)
	return true;
      else
	if (*position > value)
	  position = position.left();
	else
	  position = position.right();
    }
    return false;
    
  }
  
  /** 
   * Function to remove an element from the tree
   */
  void remove(const ItemType& element) {

  }
  
  
}; // end BinarySearchTree.h
