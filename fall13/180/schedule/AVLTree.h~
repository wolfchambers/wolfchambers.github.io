#include "BinarySearchTree.h"
#include <cmath>
#include <iostream>
using namespace std;

template <typename ItemType>
class AVLTree : public BinarySearchTree<ItemType> {
  
protected:
  
  /** function to set the height correctly **/
  void _setHeight(typename BinaryTree<ItemType>::Iterator position) {
    //get left child's height
    int leftheight;
    if (position.hasLeftChild())
      leftheight = BinaryTree<ItemType>::getAux(position.left());
    else 
      leftheight = -1;
    
    //get right child's height
    int rightheight;
    if (position.hasRightChild())
      rightheight = BinaryTree<ItemType>::getAux(position.right());
    else
      rightheight = -1;
    
    //set my height to be max +1
    BinaryTree<ItemType>::setAux(max(leftheight,rightheight)+1, position);  
  }//end of _setHeight
  
  /** function to check if a node has children whose height is 
   * within 1 of each other
   */
  bool _isBalanced(typename BinaryTree<ItemType>::Iterator position) {
    //get left child's height
    int leftheight;
    if (position.hasLeftChild())
      leftheight = BinaryTree<ItemType>::getAux(position.left());
    else 
      leftheight = -1;
    
    //get right child's height
    int rightheight;
    if (position.hasRightChild())
      rightheight = BinaryTree<ItemType>::getAux(position.right());
    else
      rightheight = -1;
    
    //compare and return true/false
    if (abs(leftheight - rightheight) <= 1)
      return true;
    else 
      return false;
    
  }
  
  typename BinaryTree<ItemType>::Iterator _getHigherChild(typename BinaryTree<ItemType>::Iterator position) {

  }
  
public:
  
  void insert(const ItemType& value) {

 
    
  } //end insert

  void remove(const ItemType& value) {

  //homework

  } //end remove
  
}; //end AVLTree class
