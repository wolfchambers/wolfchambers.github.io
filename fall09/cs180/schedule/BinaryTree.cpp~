#ifndef BINARY_TREE_H
#define BINARY_TREE_H

template <typename Object>
class BinaryTree {

protected:

	struct Node {
		Object element;
		Node* parent;
		Node* left;
		Node* right;

		Node (const Object& e = Object(), Node* p = 0, Node* l = 0, Node* r = 0) : element(e), parent(p), left(l), right(r) { }
	}; //end of Node struct


private:
	int size;
	Node* root;

	//utility functions for copy constructor, destructor, etc.
	void clearRecurse(const Node* v) {
		if (v->left != 0) {
			clearRecurse(v->left);
			clearRecurse(v->right);
		}
		delete v;
	}

	Node* cloneRecurse(const Node* v) {
		Node* n = new Node(v->element);
		if (v->left != 0) {
			n->left = cloneRecurse(v->left);
			n->right = cloneRecurse(v->right);
			n->left->parent = n;
			n->right->parent = n;
		}
		return n;
	}

public:

	//Constructor
	BinaryTree() : size(0), root(new Node) { }

	//Position class
	class Position {
	
	private:
		friend class BinaryTree<Object>; //allows access
		
		Node* node; //data - a pointer to the node

	public:
		Position(Node* n = 0) : node(n) {}

		Object& element() const {
			return node->element;
		}

		bool isNull() {
			return node == 0;
		}

		bool operator==(const Position& other) {
			return this->node == other->node;
		}

		bool operator!=(const Position& other) {
			return !(operator==(other));
		}	}; //end of Position class

	friend class Position;

	//functions to query the tree

	int getSize() const { return size; }

	bool isRoot(const Position& p) const { 
		return Position(root) == p;
	}

	bool isLeaf(const Position& p) const {
		return (p.node->left == 0);
	} 

	bool isInternal(const Position& p) const {
		return (p.node-> != 0);
	}

	//accessor function
	Position findRoot() {
		return Position(root);
	}

	Position parent(const Position& p) {
		return Position(p.node->parent);
	}

	Position leftChild(const Position& p) {
		return Position(p.node->left);
	}

	Position rightChild(const Position& p) {
		return Position(p.node->right);
	}

	//update methods
	void replaceElement(const Position& p, const Object& newElement) {
		p.node->element = newElement;
	}

	void swapElements(const Position& p1, const Position& p2) {
		Object temp = p1.node->element;
		p1.node->element = p2.node->element;
		p2.node->element = temp;
	}

	//transform leaf to an internal node
	void expandExternal(const Position& p) {
		if (isLeaf(p)) {
			p.node->left = new Node(Object(), p.node, 0, 0);
			p.node->right = new Node(Object(), p.node, 0, 0);
			size += 2;
		}
	}

	//take a leaf of the tree, delete leaf and its parent and promotes the sibling to the parent's spot
	Position removeAboveExternal(const Position& p) {
		if (!isRoot(p)) {
			Node* parent = p.node->parent;
			Node* sibling;
			if (p.node == parent->left)
				sibling = parent->right;
			else
				sibling = parent->left;
			swapElements(Position(parent), Position(sibling));
			delete parent->left;
			delete parent->right;
		}
	}

	~BinaryTree() {
		clearRecurse(root);
	}

	BinaryTree(const BinaryTree& original) {
		size = original.size;
		root = original.cloneRecurse(original.root);
	}
}; //end Binary Tree class

#endif
